{"ast":null,"code":"const API_URL = 'http://localhost:8080/api';\nconst handleResponse = async response => {\n  if (!response.ok) {\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  return await response.json();\n};\nexport const categoryService = {\n  getAllCategories: async () => {\n    try {\n      const response = await fetch(`${API_URL}/categories`);\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      return []; // Return empty array instead of throwing error\n    }\n  },\n  addCategory: async category => {\n    try {\n      const response = await fetch(`${API_URL}/categories`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(category)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error adding category:', error);\n      throw error;\n    }\n  },\n  updateCategory: async (id, category) => {\n    try {\n      const response = await fetch(`${API_URL}/categories/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(category)\n      });\n      return await handleResponse(response);\n    } catch (error) {\n      console.error('Error updating category:', error);\n      throw error;\n    }\n  },\n  deleteCategory: async id => {\n    try {\n      const response = await fetch(`${API_URL}/categories/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting category:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_URL","handleResponse","response","ok","Error","status","json","categoryService","getAllCategories","fetch","error","console","addCategory","category","method","headers","body","JSON","stringify","updateCategory","id","deleteCategory"],"sources":["C:/Users/ramiy/Documents/ShortCut/CataVoitureBackend/frontend/src/services/categoryService.js"],"sourcesContent":["const API_URL = 'http://localhost:8080/api';\r\n\r\nconst handleResponse = async (response) => {\r\n    if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n};\r\n\r\nexport const categoryService = {\r\n    getAllCategories: async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/categories`);\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error fetching categories:', error);\r\n            return []; // Return empty array instead of throwing error\r\n        }\r\n    },\r\n\r\n    addCategory: async (category) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/categories`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(category),\r\n            });\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error adding category:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    updateCategory: async (id, category) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/categories/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(category),\r\n            });\r\n            return await handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error updating category:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    deleteCategory: async (id) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/categories/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting category:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}; "],"mappings":"AAAA,MAAMA,OAAO,GAAG,2BAA2B;AAE3C,MAAMC,cAAc,GAAG,MAAOC,QAAQ,IAAK;EACvC,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;EAC7D;EACA,OAAO,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;AAChC,CAAC;AAED,OAAO,MAAMC,eAAe,GAAG;EAC3BC,gBAAgB,EAAE,MAAAA,CAAA,KAAY;IAC1B,IAAI;MACA,MAAMN,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGT,OAAO,aAAa,CAAC;MACrD,OAAO,MAAMC,cAAc,CAACC,QAAQ,CAAC;IACzC,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,EAAE,CAAC,CAAC;IACf;EACJ,CAAC;EAEDE,WAAW,EAAE,MAAOC,QAAQ,IAAK;IAC7B,IAAI;MACA,MAAMX,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGT,OAAO,aAAa,EAAE;QAClDc,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MACjC,CAAC,CAAC;MACF,OAAO,MAAMZ,cAAc,CAACC,QAAQ,CAAC;IACzC,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACf;EACJ,CAAC;EAEDS,cAAc,EAAE,MAAAA,CAAOC,EAAE,EAAEP,QAAQ,KAAK;IACpC,IAAI;MACA,MAAMX,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGT,OAAO,eAAeoB,EAAE,EAAE,EAAE;QACxDN,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;MACjC,CAAC,CAAC;MACF,OAAO,MAAMZ,cAAc,CAACC,QAAQ,CAAC;IACzC,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACf;EACJ,CAAC;EAEDW,cAAc,EAAE,MAAOD,EAAE,IAAK;IAC1B,IAAI;MACA,MAAMlB,QAAQ,GAAG,MAAMO,KAAK,CAAC,GAAGT,OAAO,eAAeoB,EAAE,EAAE,EAAE;QACxDN,MAAM,EAAE;MACZ,CAAC,CAAC;MACF,IAAI,CAACZ,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,uBAAuBF,QAAQ,CAACG,MAAM,EAAE,CAAC;MAC7D;IACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}