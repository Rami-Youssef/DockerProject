{"ast":null,"code":"const API_URL = 'http://backend:8080/api'; // Use the Docker service name\n\nexport const carService = {\n  getAllCars: async () => {\n    const response = await fetch(`${API_URL}/voitures`);\n    return response.json();\n  },\n  getCarsByCategory: async categoryId => {\n    const response = await fetch(`${API_URL}/voitures/categorie/${categoryId}`);\n    return response.json();\n  },\n  getCarById: async id => {\n    const response = await fetch(`${API_URL}/voitures/${id}`);\n    return response.json();\n  },\n  addCar: async car => {\n    const response = await fetch(`${API_URL}/voitures`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(car)\n    });\n    return response.json();\n  },\n  updateCar: async (id, car) => {\n    const response = await fetch(`${API_URL}/voitures/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(car)\n    });\n    return response.json();\n  },\n  deleteCar: async id => {\n    await fetch(`${API_URL}/voitures/${id}`, {\n      method: 'DELETE'\n    });\n  },\n  uploadImage: async file => {\n    try {\n      console.log('Uploading file:', file.name);\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch(`${API_URL}/images/upload`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Accept': 'text/plain'\n        }\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Upload failed:', errorText);\n        throw new Error(errorText || 'Failed to upload image');\n      }\n      const fileName = await response.text();\n      console.log('Upload successful:', fileName);\n      return fileName;\n    } catch (error) {\n      console.error('Error uploading image:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_URL","carService","getAllCars","response","fetch","json","getCarsByCategory","categoryId","getCarById","id","addCar","car","method","headers","body","JSON","stringify","updateCar","deleteCar","uploadImage","file","console","log","name","formData","FormData","append","ok","errorText","text","error","Error","fileName"],"sources":["C:/Users/ramiy/Documents/ShortCut/examRami/frontend/src/services/carService.js"],"sourcesContent":["const API_URL = 'http://backend:8080/api'; // Use the Docker service name\n\n\nexport const carService = {\n    getAllCars: async () => {\n        const response = await fetch(`${API_URL}/voitures`);\n        return response.json();\n    },\n\n    getCarsByCategory: async (categoryId) => {\n        const response = await fetch(`${API_URL}/voitures/categorie/${categoryId}`);\n        return response.json();\n    },\n\n    getCarById: async (id) => {\n        const response = await fetch(`${API_URL}/voitures/${id}`);\n        return response.json();\n    },\n\n    addCar: async (car) => {\n        const response = await fetch(`${API_URL}/voitures`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(car),\n        });\n        return response.json();\n    },\n\n    updateCar: async (id, car) => {\n        const response = await fetch(`${API_URL}/voitures/${id}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(car),\n        });\n        return response.json();\n    },\n\n    deleteCar: async (id) => {\n        await fetch(`${API_URL}/voitures/${id}`, {\n            method: 'DELETE',\n        });\n    },\n\n    uploadImage: async (file) => {\n        try {\n            console.log('Uploading file:', file.name);\n            const formData = new FormData();\n            formData.append('file', file);\n\n            const response = await fetch(`${API_URL}/images/upload`, {\n                method: 'POST',\n                body: formData,\n                headers: {\n                    'Accept': 'text/plain'\n                }\n            });\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Upload failed:', errorText);\n                throw new Error(errorText || 'Failed to upload image');\n            }\n\n            const fileName = await response.text();\n            console.log('Upload successful:', fileName);\n            return fileName;\n        } catch (error) {\n            console.error('Error uploading image:', error);\n            throw error;\n        }\n    }\n}; "],"mappings":"AAAA,MAAMA,OAAO,GAAG,yBAAyB,CAAC,CAAC;;AAG3C,OAAO,MAAMC,UAAU,GAAG;EACtBC,UAAU,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,WAAW,CAAC;IACnD,OAAOG,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDC,iBAAiB,EAAE,MAAOC,UAAU,IAAK;IACrC,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,uBAAuBO,UAAU,EAAE,CAAC;IAC3E,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDG,UAAU,EAAE,MAAOC,EAAE,IAAK;IACtB,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAaS,EAAE,EAAE,CAAC;IACzD,OAAON,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDK,MAAM,EAAE,MAAOC,GAAG,IAAK;IACnB,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,WAAW,EAAE;MAChDY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,GAAG;IAC5B,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDY,SAAS,EAAE,MAAAA,CAAOR,EAAE,EAAEE,GAAG,KAAK;IAC1B,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,aAAaS,EAAE,EAAE,EAAE;MACtDG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,GAAG;IAC5B,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACE,IAAI,CAAC,CAAC;EAC1B,CAAC;EAEDa,SAAS,EAAE,MAAOT,EAAE,IAAK;IACrB,MAAML,KAAK,CAAC,GAAGJ,OAAO,aAAaS,EAAE,EAAE,EAAE;MACrCG,MAAM,EAAE;IACZ,CAAC,CAAC;EACN,CAAC;EAEDO,WAAW,EAAE,MAAOC,IAAI,IAAK;IACzB,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,IAAI,CAACG,IAAI,CAAC;MACzC,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEN,IAAI,CAAC;MAE7B,MAAMjB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,gBAAgB,EAAE;QACrDY,MAAM,EAAE,MAAM;QACdE,IAAI,EAAEU,QAAQ;QACdX,OAAO,EAAE;UACL,QAAQ,EAAE;QACd;MACJ,CAAC,CAAC;MAEF,IAAI,CAACV,QAAQ,CAACwB,EAAE,EAAE;QACd,MAAMC,SAAS,GAAG,MAAMzB,QAAQ,CAAC0B,IAAI,CAAC,CAAC;QACvCR,OAAO,CAACS,KAAK,CAAC,gBAAgB,EAAEF,SAAS,CAAC;QAC1C,MAAM,IAAIG,KAAK,CAACH,SAAS,IAAI,wBAAwB,CAAC;MAC1D;MAEA,MAAMI,QAAQ,GAAG,MAAM7B,QAAQ,CAAC0B,IAAI,CAAC,CAAC;MACtCR,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEU,QAAQ,CAAC;MAC3C,OAAOA,QAAQ;IACnB,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZT,OAAO,CAACS,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACf;EACJ;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}