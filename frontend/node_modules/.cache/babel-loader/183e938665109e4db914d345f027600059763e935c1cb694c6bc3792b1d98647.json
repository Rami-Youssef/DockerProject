{"ast":null,"code":"const API_URL = 'http://localhost:8080/api';\nconst handleResponse = async response => {\n  console.log('Response status:', response.status);\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error('Error response:', errorText);\n    throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\n  }\n  return response.json();\n};\nexport const categoryService = {\n  getAllCategories: async () => {\n    try {\n      console.log('Fetching all categories from:', `${API_URL}/categories`);\n      const response = await fetch(`${API_URL}/categories`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        credentials: 'include'\n      }).catch(error => {\n        console.error('Network error:', error);\n        throw new Error(`Network error: ${error.message}`);\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error in getAllCategories:', error);\n      throw error;\n    }\n  },\n  addCategory: async category => {\n    try {\n      console.log('Adding category:', category);\n      const response = await fetch(`${API_URL}/categories`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(category)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error adding category:', error);\n      throw error;\n    }\n  },\n  updateCategory: async (id, category) => {\n    try {\n      console.log('Updating category:', id, category);\n      const response = await fetch(`${API_URL}/categories/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(category)\n      });\n      return handleResponse(response);\n    } catch (error) {\n      console.error('Error updating category:', error);\n      throw error;\n    }\n  },\n  deleteCategory: async id => {\n    try {\n      console.log('Deleting category:', id);\n      const response = await fetch(`${API_URL}/categories/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error('Error deleting category:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_URL","handleResponse","response","console","log","status","ok","errorText","text","error","Error","json","categoryService","getAllCategories","fetch","method","headers","credentials","catch","message","addCategory","category","body","JSON","stringify","updateCategory","id","deleteCategory"],"sources":["C:/Users/ramiy/Documents/ShortCut/CataVoitureBackend/frontend/src/services/categoryService.js"],"sourcesContent":["const API_URL = 'http://localhost:8080/api';\r\n\r\nconst handleResponse = async (response) => {\r\n    console.log('Response status:', response.status);\r\n    if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Error response:', errorText);\r\n        throw new Error(`HTTP error! status: ${response.status}, message: ${errorText}`);\r\n    }\r\n    return response.json();\r\n};\r\n\r\nexport const categoryService = {\r\n    getAllCategories: async () => {\r\n        try {\r\n            console.log('Fetching all categories from:', `${API_URL}/categories`);\r\n            const response = await fetch(`${API_URL}/categories`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                credentials: 'include'\r\n            }).catch(error => {\r\n                console.error('Network error:', error);\r\n                throw new Error(`Network error: ${error.message}`);\r\n            });\r\n            return handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error in getAllCategories:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    addCategory: async (category) => {\r\n        try {\r\n            console.log('Adding category:', category);\r\n            const response = await fetch(`${API_URL}/categories`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(category),\r\n            });\r\n            return handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error adding category:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    updateCategory: async (id, category) => {\r\n        try {\r\n            console.log('Updating category:', id, category);\r\n            const response = await fetch(`${API_URL}/categories/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(category),\r\n            });\r\n            return handleResponse(response);\r\n        } catch (error) {\r\n            console.error('Error updating category:', error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    deleteCategory: async (id) => {\r\n        try {\r\n            console.log('Deleting category:', id);\r\n            const response = await fetch(`${API_URL}/categories/${id}`, {\r\n                method: 'DELETE',\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting category:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}